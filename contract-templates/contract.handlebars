import {
  BaseContract,
  ContractCall,
  ContractDeployment,
  ContractTransaction,
} from '@axie/base-contract';
import { Web3Pool } from '@axie/web3-pool';
import BigNumber = require('bn.js');
import { TransactionConfig } from 'web3-core';

import abis from '../abi/{{contractName}}.abi';

export class {{contractName}}Contract extends BaseContract {
  static deploy(
  {{> typed_params inputs=ctor.inputs}}
  ): ContractDeployment<{{contractName}}Contract> {
    const { default: bytecode } = eval('require')('../bytecode/{{contractName}}.bytecode');

    return {{contractName}}Contract.deployFromBytecode(
      bytecode,
      {{> params inputs=ctor.inputs}}
    );
  }

  static deployFromBytecode(
    bytecode: string,
  {{> typed_params inputs=ctor.inputs}}
  ): ContractDeployment<{{contractName}}Contract> {
    return BaseContract.constructDeployment(
      bytecode,
      [{{> params inputs=ctor.inputs}}],
      abis,
      (address, web3Pool) => new {{contractName}}Contract(address, web3Pool),
    );
  }

  constructor(address: string, web3Pool: Web3Pool, txDefaults?: TransactionConfig) {
    super('{{contractName}}', abis as any, address, web3Pool, txDefaults);
  }

{{#each methods}}
  {{#this.constant}}
  {{> call contractName=../contractName}}
  {{/this.constant}}
  {{^this.constant}}
  {{> tx contractName=../contractName}}
  {{/this.constant}}
{{/each}}
}
